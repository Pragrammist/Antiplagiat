Содержание

ОченьОченьОченьОченьОченьОченьОченьОченьОченьОченьДлинноеСловоТест

Введение…………………………………………………………………………
4
1
Анализ предметной области……………………………………….……....
6


1.1 Исследование предметной области……………………………………
6


1.2 Требования к разработке……………………………………………….
7


1.3 Требования к программному обеспечению…………………………...
8
2
Анализ методов реализации и постановка задачи………………………..
9


2.1 Постановка задачи……………………………………………………...
9


2.2 Выбор средств реализации……………………………………………..
10


2.3 Принцип разработки структуры хранения данных…………………...
12


2.4 Разработка структуры хранения данных……………………………...
13
3   
Практическая реализация………..…….…………………………………...
16


3.1 Процесс разработки бэкенда…………………………………………...
16


3.2 Процесс разработки фронтенда………………………………………..
21


3.3 Итог разработки………………………………………………………...
25
4
Тестирование разработки…………………………………………………..
27


4.1 Определение тестирования…………………………………………….
27


4.2 Результаты тестирования веб-приложения……………………………
29
Заключение……………………………………………………………………...
36
Список использованных информационных ресурсов………………………..
37



Введение


Тема курсовой работы – разработка системы учета договоров.
В ВУЗе огромный документооборот, и он постоянно увеличивается, возможность сформировать договор быстро становится необходимостью. В этом контексте приложение по автоматизации процесса формирования документа договора между студентом и компанией, которая отвечает за практику студента, приобретает большую значимость.
Целью курсовой работы является разработка сайта для автоматического формирования документа договора между ВУЗом, студентом и компанией. В дальнейшем данный документ называется договор. Название сайта, созданный в этой работе, Treaty Automated System (TAS). Чтобы выполнить цель поставлены следующие задачи:
−	сделать возможность на сайте загрузить excel-файл с необходимыми данными;
−	сделать просмотр загруженных данных;
−	сделать функцию загрузки шаблонов;
−	сделать функции формирования договора.
Из технологий решено использовать язык программирования C# и веб фреймворк ASP.NET core для написания бэкенда, СУБД Sqlite, фреймворк на C# Entity Framework Core, который связывает БД и веб-приложение, библиотеку на C# ExcelDataReader, которая позволяет читать excel-файлы, библиотеку на C# OpenXmlPackage, которая позволяет читать и редактировать файлы Microsoft Office, языки разметки HTML/CSS, JavaScript и библиотеку jQuery.
Был разработан сайт, который позволяет сотруднику из отдела практики загрузить данные для договоров из Excel, загрузить шаблон договоров, просмотреть эти данные и, вводя ФИО студента и выбрав название компании, сформировать договор. Также данный функционал доступен по нажатии кнопки, которая находится на главной странице.
Сайт полезен тем, кому нужно быстро сформировать договор для прохождения практики.
В первом разделе пояснительной записки, рассмотрены понятия, охватывающие тему курсовой работы, составлены требования к разработке приложения, а также требования к программному обеспечению.
Во втором разделе рассматривается выбор средств реализации, а также спроектирована структура базы данных.
В третьем разделе рассмотрены процессы разработки приложения.
В четвертом разделе приведены основные понятия тестирования приложений, а также описан сам процесс тестирования сайта по автоматизации формирования договоров.

1 Анализ предметной области
 
 
1.1 Исследование предметной области
 
 
Система учета договоров — это система, которая позволяет организациям управлять договорными отношениями с другими организациями или клиентами. Она осуществляет хранение, обработку и анализ данных о контрактах и позволяет автоматизировать многие процессы, связанные с управлением контрактами. Система учета договоров бывает разная и включает много разных аспектов в создание и редактирование договоров, хранение договоров и связанных с ними документов, управление, сроками действия контрактов и напоминание об их истечении, учет финансовых показателей, связанных с договорами отчетность по договорам и связанным с ними финансовым показателям. Целью системы учета договоров является упрощение процесса управления контрактами и повышение эффективности бизнес-процессов, связанных с заключением и исполнением договоров. Такая система может быть весьма полезна для компаний с большим объемом договорной работы, поскольку она помогает автоматизировать многие рутинные процессы, связанные с управлением контрактами. В целом, система учета договоров является важным инструментом для организаций, которые хотят повысить эффективность управления контрактами и обеспечить точное и своевременное выполнение договорных обязательств. Для системы, которая создана в этой курсовой работе, все указанные выше возможности не обязательно добавлять, так как системой будет пользоваться только один человек, и многие указанные возможности носят второстепенный характер. Также обычно такую систему разрабатывает несколько человек. Для системы разработанной в этой работе самое главное — это возможность загрузки и изменения шаблона договора, хранение данных, которые фигурируют в договоре.

1.2 Требования к разработке
 
 
Excel-файл с данными — первый основной элемент, который несет в себе информацию о сторонах, между которыми подписывается договор. Данные подставляются в необходимые места в договоре и загружаются в БД в удобном для сайта формате. При разработке можно либо сделать чтение из excel-файла гибким, то есть чтение из файла происходит по определенной сигнатуре в любом порядке, либо можно сделать, чтобы данные читались непосредственно из определенных ячеек. Недостаток первого подхода в том, что данные могут заполняться с ошибками, недостаток второго в том, что сайт не будет устойчив к изменениям. Третий вариант - сделать чтение по сигнатуре, но задать фиксированный порядок поиска. Так как изменения формата excel-файла маловероятны, то можно использовать второй вариант.
Шаблон договора — второй основной элемент. Это Word-файл, в котором написан договор до его заполнения. В шаблоне фигурируют условия договора, юридические или физические лица, данные сторон. Важно наличие возможности редактирования шаблона договора, возможность замены реквизитов ВУЗа или добавления пунктов условий договора. Основные сложности в том, что невозможно полностью предугадать, как шаблон договора будет создан человеком в программе Word. И вторая главная сложность в том, что если дать пользователю слишком много возможности менять договор, веб-приложение будет формировать договор неправильно.
Данные договора — третий основной элемент. Это данные, фигурирующие в договоре, которые нельзя внести в шаблон договора. К ним относятся данные студентов, данные компаний или данные групп. Данные, которые можно заполнить в шаблоне договора не учитываются, например реквизиты ВУЗа. Данные договора хранятся в удобном виде для системы.
Взаимодействие с загруженными данными договора — четвертый основной элемент. Это поиск студента по ФИО и формирование договора с данными студента, которые хранятся в системе. Также это чтение, редактирование и добавление данных по группам, по специальностям и по студентам. Важно, чтобы взаимодействие с данными было удобным и быстрым.
Валидация данных — пятый основной элемент. От валидации зависит, правильность работы сайта. Валидация данных должна работать исправно и охватывать как можно больше число ошибок, которые могут возникнуть. Если валидация будет работать неисправно, то это повлечет за собой некорректную работу веб-приложения. И пользователь должен понимать все основные ошибки, которые охватывает валидация.
Для успеха важно понимание предметной области и соблюдений всех выше указанных требований. Их непонимание или несоблюдение сделает сайт неудобным, малоэффективным и не выполняющим свою функцию по автоматизации формирования договоров.
 
 
1.3 Требования к программному обеспечению
 
 
Минимальные системные требования:
−	ОС (операционная система): Windows 8.1/10;−                    процессор: Intel Core 2 Duo @ 3.0 Ghz;
−	оперативная память: 100 Mb;
−	жесткий диск: 100 Mb свободно;
Рекомендуемые системные требования:
−	ОС (операционная система): Windows 10/11;
−	процессор: Intel Core i3 @ 3.2 GHz;
−	оперативная память: 500 Mb;
−	жесткий диск: 500 Mb свободно;
Это системные требования для веб-приложения при работе с небольшим количеством данных, не учитывающие БД.

2 Анализ методов реализации и постановки задачи
 
 
2.1 Постановка задачи
 
 
После анализа предметной области и постановки требований к разработке поставлены следующие задачи:
−	создать функционал для загрузки данных в excel-файле с возможностью указать тип загружаемого файла;
−	создать возможность редактирования загруженных данных с помощью excel-файл;
−	создать функционал для просмотра загруженных файлов;
−	создать функционал позволяющий найти студента в системе и сформировать для него договор;
−	создать функционал позволяющий формировать договор для компании;
−	создать валидацию загружаемых данных и валидацию, загруженных шаблонов договора;
−	создать адаптивный дизайн веб-приложения, чтобы можно было просматривать данные на разных мониторах;
−	сделать интерфейс удобным, практичным, минималистичным и простым в освоении;
−	сделать код расширяемым;
−	сделать плавную анимацию появления списка студентов во время формирования шаблона;
− 	создать функционал для просмотра данных;
−	сделать возможность скачивания тестового договора при загрузке нового шаблона;
−	сделать возможным редактирование шаблона договора.



2.2 Выбор средств реализации
 
 
C# является мощным и эффективным языком программирования, который может использоваться для создания широкого спектра приложений, от простых консольных программ до сложных веб-приложений и игр. Также внутренняя реализация ООП является одной из лучшей среди других языков. C# имеет большое сообщество разработчиков, которые активно обмениваются опытом и создают готовые библиотеки и решения для различных задач. 
ASP.NET Core подходит для создания высокопроизводительных, безопасных и гибких веб-приложений, работающих на различных платформах. Также это самый популярный и поддерживаемый фреймворк для разработки веб-приложений из всех, написанных на C#. ASP.NET Core предоставляет множество инструментов и библиотек для создания веб-приложений любой сложности. ASP.NET Core включает в себя множество улучшений для обеспечения безопасности приложений, таких как авторизация, аутентификация, защита от CSRF. Данный фреймворк позволяет писать приложения на множестве различных архитектур, начинаю от MVC, MVVM, заканчивая RESTful приложением или SPA.
SQLite – «легковесная» реляционная база данных, что делает отличным выбором для проектов, в которых не требуется работа с огромными объемами данных. Используемая СУБД не требует дополнительных установок, так как все необходимые библиотеки уже встроены. Использование SQLite очень простое и интуитивно понятное. SQLite обеспечивает хорошую защиту данных и устойчивость. SQLite может быть использована на многих платформах и операционных системах. SQLite разработана для быстрого доступа к данным и минимизации использования ресурсов, что позволяет создавать быстрые и эффективные приложения.
jQuery – «легковесная» библиотека JavaScript, которая позволяет легко манипулировать DOM-элементами и создавать интерактивные пользовательские интерфейсы. Библиотека была создана с целью упростить написание JavaScript кода для разработчиков, для улучшения пользовательского интерфейса веб-страниц. Данная библиотека сократила большое количество кода, времени и сил своей простотой и универсальностью.
HTML, CSS и JavaScript работают вместе для создания современных веб-страниц и веб-приложений. HTML определяет содержимое страницы, CSS - стилизацию и внешний вид страницы, на JavaScript - динамическое поведение и взаимодействие с пользователем и сервером.
Entity Framework Core (EF Core) — современный, кроссплатформенный и мощный инструмент для работы с базами данных в C#-приложениях, который позволяет упростить работу с данными в C#. EF Core позволяет создавать и использовать объекты, представляющие данные в БД (так называемые ORM - Object-Relational Mapping). EF Core позволяет упростить работу с данными в приложении. EF Core позволяет работать с различными СУБД, такими как Microsoft SQL Server, SQLite, PostgreSQL, MySQL и другими. У EF Core есть хорошая документация и обширное сообщество. Данный фреймворк использует паттерн репозиторий, которые абстрагирует от того, каким способом происходит работа с данными.
ExcelDataReader — это библиотека для чтения данных из файлов Microsoft Excel. Это библиотека имеет высокую производительность, независимость от Microsoft Office, открытый исходный код, надежность и стабильность. Данная библиотека позволяет создавать логику чтения данных из excel-файла с большой вариативностью.
OpenXmlPackage — это библиотека на C# для работы с документами Microsoft Office в форматах .docx, .xlsx и .pptx. Библиотека имеет простой и интуитивно понятный интерфейс взаимодействия, высокую производительность, независимость от Microsoft Office, открытый исходный код, поддержку широкого набора возможностей, связанных не только с форматом docx, надежность и стабильность. 


C# является мощным и эффективным языком программирования, который может использоваться для создания широкого спектра приложений, от простых консольных программ до сложных веб-приложений и игр. Также внутренняя реализация ООП является одной из лучшей среди других языков. C# имеет большое сообщество разработчиков, которые активно обмениваются опытом и создают готовые библиотеки и решения для различных задач. 
ASP.NET Core подходит для создания высокопроизводительных, безопасных и гибких веб-приложений, работающих на различных платформах. Также это самый популярный и поддерживаемый фреймворк для разработки веб-приложений из всех, написанных на C#. ASP.NET Core предоставляет множество инструментов и библиотек для создания веб-приложений любой сложности. ASP.NET Core включает в себя множество улучшений для обеспечения безопасности приложений, таких как авторизация, аутентификация, защита от CSRF. Данный фреймворк позволяет писать приложения на множестве различных архитектур, начинаю от MVC, MVVM, заканчивая RESTful приложением или SPA.
SQLite – «легковесная» реляционная база данных, что делает отличным выбором для проектов, в которых не требуется работа с огромными объемами данных. Используемая СУБД не требует дополнительных установок, так как все необходимые библиотеки уже встроены. Использование SQLite очень простое и интуитивно понятное. SQLite обеспечивает хорошую защиту данных и устойчивость. SQLite может быть использована на многих платформах и операционных системах. SQLite разработана для быстрого доступа к данным и минимизации использования ресурсов, что позволяет создавать быстрые и эффективные приложения.
jQuery – «легковесная» библиотека JavaScript, которая позволяет легко манипулировать DOM-элементами и создавать интерактивные пользовательские интерфейсы. Библиотека была создана с целью упростить написание JavaScript кода для разработчиков, для улучшения пользовательского интерфейса веб-страниц. Данная библиотека сократила большое количество кода, времени и сил своей простотой и универсальностью.
HTML, CSS и JavaScript работают вместе для создания современных веб-страниц и веб-приложений. HTML определяет содержимое страницы, CSS - стилизацию и внешний вид страницы, на JavaScript - динамическое поведение и взаимодействие с пользователем и сервером.
Entity Framework Core (EF Core) — современный, кроссплатформенный и мощный инструмент для работы с базами данных в C#-приложениях, который позволяет упростить работу с данными в C#. EF Core позволяет создавать и использовать объекты, представляющие данные в БД (так называемые ORM - Object-Relational Mapping). EF Core позволяет упростить работу с данными в приложении. EF Core позволяет работать с различными СУБД, такими как Microsoft SQL Server, SQLite, PostgreSQL, MySQL и другими. У EF Core есть хорошая документация и обширное сообщество. Данный фреймворк использует паттерн репозиторий, которые абстрагирует от того, каким способом происходит работа с данными.
ExcelDataReader — это библиотека для чтения данных из файлов Microsoft Excel. Это библиотека имеет высокую производительность, независимость от Microsoft Office, открытый исходный код, надежность и стабильность. Данная библиотека позволяет создавать логику чтения данных из excel-файла с большой вариативностью.
OpenXmlPackage — это библиотека на C# для работы с документами Microsoft Office в форматах .docx, .xlsx и .pptx. Библиотека имеет простой и интуитивно понятный интерфейс взаимодействия, высокую производительность, независимость от Microsoft Office, открытый исходный код, поддержку широкого набора возможностей, связанных не только с форматом docx, надежность и стабильность. 

C# является мощным и эффективным языком программирования, который может использоваться для создания широкого спектра приложений, от простых консольных программ до сложных веб-приложений и игр. Также внутренняя реализация ООП является одной из лучшей среди других языков. C# имеет большое сообщество разработчиков, которые активно обмениваются опытом и создают готовые библиотеки и решения для различных задач. 
ASP.NET Core подходит для создания высокопроизводительных, безопасных и гибких веб-приложений, работающих на различных платформах. Также это самый популярный и поддерживаемый фреймворк для разработки веб-приложений из всех, написанных на C#. ASP.NET Core предоставляет множество инструментов и библиотек для создания веб-приложений любой сложности. ASP.NET Core включает в себя множество улучшений для обеспечения безопасности приложений, таких как авторизация, аутентификация, защита от CSRF. Данный фреймворк позволяет писать приложения на множестве различных архитектур, начинаю от MVC, MVVM, заканчивая RESTful приложением или SPA.
SQLite – «легковесная» реляционная база данных, что делает отличным выбором для проектов, в которых не требуется работа с огромными объемами данных. Используемая СУБД не требует дополнительных установок, так как все необходимые библиотеки уже встроены. Использование SQLite очень простое и интуитивно понятное. SQLite обеспечивает хорошую защиту данных и устойчивость. SQLite может быть использована на многих платформах и операционных системах. SQLite разработана для быстрого доступа к данным и минимизации использования ресурсов, что позволяет создавать быстрые и эффективные приложения.
jQuery – «легковесная» библиотека JavaScript, которая позволяет легко манипулировать DOM-элементами и создавать интерактивные пользовательские интерфейсы. Библиотека была создана с целью упростить написание JavaScript кода для разработчиков, для улучшения пользовательского интерфейса веб-страниц. Данная библиотека сократила большое количество кода, времени и сил своей простотой и универсальностью.
определяет содержимое страницы стилизацию внешний и вид страницы на JavaScript - динамическое поведение и взаимодействие с пользователем и сервером.



2.3 Принцип разработки структуры хранения данных
 
 
Для разработки структуры хранения данных для разработки системы учета договоров определены сущности и атрибуты. Сущности — это объекты, которые нужно хранить в базе данных. Атрибуты — это характеристики сущностей. Также созданы таблицы, представляющие сущность и содержащие атрибуты этой сущности. Каждая таблица имеет уникальный идентификатор. Определены связи между таблицами. Сформулированы правила целостности данных, определены типы данных и их ограничения. Для разработки структуры хранения данных использован Entity Framework Core. Данный фреймворк помогает конвертировать модель на C# в модель Sqlite. Фреймворк Entity Framework Core помогает абстрагироваться от СУБД и позволяет работать с данными без языка SQL. Применение этого фреймворка позволит в дальнейшем использовать другую СУБД такую, как MS Sql, PostgreSql и многие другие СУБД без сильных изменений текущего кода. Это возможно благодаря архитектуре Entity Framework Core. На рисунке 1 изображена архитектура данного фреймворка.


Рисунок 1 – архитектура Entity Framework Core.

2.4 Разработка структуры хранения данных
 
 
На листинге 1 показана информационная модель студента с его свойствами, написанная на C#, которую Entity Framework Core конвертирует в таблицу «Student» для Sqlite.
Листинг 1 — структура данных. Модель студента.
public class Student
 	{
     	[DatabaseGenerated (DatabaseGeneratedOption.Identity)]
     	public string Id { get; set; } = null!;
     	public string Fio { get; set; } = null!;
     	public StudyConditionType StdCond { get; set; }
 	 	public Group Group { get; set; } = null!;
 	}
Свойство Id типа string отвечает за хранение уникального идентификатора. На 3 строке листинга 1 располагается атрибут «DatabaseGenerated» с входящим значением «DatabaseGeneratedOption.Identity». Этот атрибут указывает для Entity Framework Core генерировать автоматически уникальный идентификатор для студента типа «GUID». Свойство «Fio» типа «string» отвечает за хранение ФИО. Свойство «StdCond» типа «StudyConditionType» отвечает за хранение условия обучения, и может принимать значение «Ste». Данное значение для свойства «StdCond» принимается, когда студент обучается на бесплатной форме обучения в ВУЗе. Если вышеуказанное свойство принимает значение «Pd», то студент учится на платной форме обучения. Тип «StudyConditionType» в базе данных приобразуется в тип «int». Тип «StudyConditionType» для значения «Ste» в БД имеет значение 0 типа «int», для «Pd» имеет значение 1 типа «int» . Данное свойство имеет значение «Ste» по умолчанию. Поле «Group» отвечает за хранение данных о группе, в которой студент учится. Свойство «Group» является типом другой одноименной модели «Group».  Далее будет подробно рассмотрено, какие свойства модель «Group» имеет. Все свойства, ссылочного типа, «string» имеют приставку в конце «= null!», что предотвращает сохранение «NULL» в БД для модели Student для свойств, имеющую приставку «= null!».
На листинге 2 показана модель группы с его свойствами, написанная на C#, которую Entity Framework Core конвертирует в таблицу «Group» для Sqlite.
Листинг 2 — структура данных. Модель группы.
public class Group
 	{
     	public int Id { get; set; }
     	public DateTime? PracticeStart { get; set; }
     	public DateTime? PracticeEnd { get; set; }
     	public PracticeType? PracticeType { get; set; }
     	public string Name { get; set; } = null!;
     	public Speciality Speciality { get; set; } = null!;
      	public string CourseNum { get; set; }
     	public FacultativeType? Facultative { get; set; }
     	public ICollection<Student> Students { get; set; }
 	}
Свойство «PracticeStart» типа «Datetime?» хранит информацию о дате начала практик групп. Свойство «PracticeEnd» типа «Datetime?» хранит информацию о дате окончания практик групп. Свойство «PracticeType» хранит информацию о типе практики и может принимать значение «Diploma», «Learn» и «Factory». Свойство «PracticeType» не имеет значения по умолчанию и может хранить «NULL» в БД. Свойство «Name» хранит информацию о названии группы студентов и является идентификатором, что является причиной того, что модель «Student» имеет «Id» типа «string». Свойство «Speciality» хранит информацию о специальности группы студентов и является типом одноименной модели «Speciality», которая рассматривается далее. Свойство «CourseNum» хранит номер курса студента. Свойство «FacultativeType» хранит информацию факультативе группы студентов и может принимать значение «Sec» и «Hgh». Первое значение принимается, когда группа обучается на средне специальном образовании, второе значение на высшем образовании. Свойство «Students» хранит информацию студентов в группе.
На Листинге 3 — показана информационная модель специальности группы на C#, которую Entity Framework Core конвертирует в таблицу «Speciality» для Sqlite.
Листинг 3 — структура данных. Модель специальности.
public class Speciality
{
	public string Name { get; set; } = null!;
	public string Code { get; set; } = null!; 
}
Свойство «Name» хранит в себе название группы и код группы. Свойство «Code» хранит в себе только код группы и является уникальным идентификатором. Таблицы «Speciality» и «Group» имеют связь один ко многим.

3 Практическая реализация приложения
 
 
3.1 Процесс разработки бэкенда
 
 
Код бэкенда можно разделить на следующие составные части: на хранение и чтение данных из БД, на чтение excel-файлов, на генерацию договоров, на информационные модели, на веб-сервер и на объединение составных частей бэкенда.
Логика хранения данных содержит класс, который помогает абстрагироваться от SQL и работать с данными полностью на C#.
Листинг 4 – контекст данных. Логика взаимодействие СУБД и C#.
public class TasDbContext : DbContext {
    	public DbSet<Student> Students { get; set; } = null!;
    	public DbSet<Group> Groups { get; set; } = null!;
    	public DbSet<Speciality> Specialities { get; set; } = null!;
    	public DbSet<Company> Companies { get; set; } = null!;
    	public TasDbContext(DbContextOptions options) : base(options)
    	{
Database.EnsureCreated();
}
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    	{
        modelBuilder.Entity<Student>()
.HasKey(k => k.Id);
        modelBuilder.Entity<Group>().HasKey(g => g.Name);
        modelBuilder.Entity<Speciality>().HasKey(s => s.Code);
        modelBuilder.Entity<Company>().HasKey(s => s.Name);
modelBuilder.Entity<Group>()
.HasOne(g => g.Speciality).WithMany();modelBuilder.Entity<Group>().HasMany(g => g.Students).WithOne(s => s.Group);
    }
}
На листинге 14 показано объединение C# и СУБД. Здесь создается в класс, в котором указывается, какие таблицы нужно создать, как их объединить и какие у различных свойств моделей есть ограничения в БД.

На листинге показана логика чтения и обновления данных о группе.
Листинг 5 – использование контекста данных. Логика записи данных группы.
public class DbService
{
    void UpdateCompanyData(Company toUpdate, Company data)
    {
          	 toUpdate.Name = data.Name;
 toUpdate.DirectorName = data.DirectorName;
       toUpdate.NaOsnovanii = data.NaOsnovanii;
       toUpdate.Recvizit = data.Recvizit;
}
public async Task AddOrUpdateGroup(Group group)
{
await PrepareGroup(group);
        var fGroup = await _dbContext.Groups
            .Include(i => i.Speciality)
            .Include(i => i.Students)
            .FirstOrDefaultAsync(g => g.Name == group.Name);
        if(fGroup is null)
            await _dbContext.Groups.AddAsync(group);
        else
        {  
            UpdateGroupFromData(fGroup, group);
            _dbContext.Update(fGroup);
        }
        await _dbContext.SaveChangesAsync();
    }
    async Task PrepareGroup(Group group)
    {
        var fSpec = await _dbContext.Specialities
  .FindAsync(group.Speciality.Code);
        if(fSpec is not null)
            group.Speciality = fSpec;
    }
    }
Метод «AddOrUpdateGroup» добавляет или обновляет информацию о группе студентов, если передаваемая группа загружена в БД. Метод в начале проверяет наличие передаваемой специальности. Если специальность уже существует, то далее в контексте данных используется существующая группа. Далее передаваемая группа проверяется на наличие, если данная группа существует, то вызывается метод «UpdateGroupFromData», который обновляет данные существующей группы студентов, беря их из старой.
Данный метод позволяет обновить информацию о существующей группы студентов, если загружаемый excel-файл содержит существующую группу.
На листинге 6 показана логика обновления данных групп студентов. Метод изображенный ниже упоминался выше.
Листинг 6 – использование контекста данных. Логика обновления данных групп.
        	 void UpdateGroupFromData(Group toUpdate, Group data)
         {
          if(data.Students.Count > 0)
          {
             _dbContext.Students.RemoveRange(toUpdate.Students);
             toUpdate.Students = data.Students;
          }
          if(data.CourseNum is not null)
              toUpdate.CourseNum = data.CourseNum;
          if(data.PracticeType is not null)
              toUpdate.PracticeType = data.PracticeType;
         if(data.Facultative is not null)
              toUpdate.Facultative = data.Facultative;
          if(data.PracticeEnd is not null)
              toUpdate.PracticeEnd = data.PracticeEnd;
          if(data.PracticeStart is not null)
              toUpdate.PracticeStart = data.PracticeStart;
          if(data.PracticeType is not null)
              toUpdate.PracticeType = data.PracticeType;
 	if(data.PracticeType is not null)
              toUpdate.PracticeType = data.PracticeType;
 	if(data.PracticeType is not null)
              toUpdate.PracticeType = data.PracticeType;
     	 }
Данный метод обновляет данные существующей группы.
На листинге 7 показана логика обновления нескольких групп.
Листинг 7 – использование контекста данных. Логика обновления нескольких групп.
public 
async Task 
UploadManyGroups
(IEnumerable<Group> 
groups)
{
foreach (var  group in groups)
{
await AddOrUpdateGroup(group);
}
}
Данный метод использует уже существующий метод, который упоминался выше.

На листинге 8 показана логика чтения данных.
Листинг 8 – использование контекста данных. Логика чтения данных.
public IEnumerable<string> GetNameCompanies() => GetCompanies().Select(s => s.Name);
public async Task<Group?> FindGroupOrDefault(string groupName) => await _dbContext.Groups
                      .Include(g => g.Students)
                      .Include(g => g.Speciality)
                      .FirstOrDefaultAsync(g => g.Name == groupName);public IEnumerable<Group> GetGroups() => _dbContext.Groups.Include(g => g.Speciality);
public IEnumerable<Speciality> GetSpecialities() => _dbContext.Specialities;
public IEnumerable<Company> GetCompanies() => _dbContext.Companies;
 	 public Task<IEnumerable<FindStudentResult>> FindStudentsByQuery(string query)
{ var toLowQ = query.ToLower();
          var students = _dbContext.Students.Include(s => s.Group)		.Where(f => f.Fio == toLowQ || f.Fio.Contains(toLowQ)
              ).Select(s => new FindStudentResult { Name = s.Fio.ToUpperFirstLater(), Group = s.Group.Name, Id = s.Id }).Take(10);
return Task.FromResult((IEnumerable<FindStudentResult>)students);}  
      public async Task<Student> FindStudentById(string id) =>
          await _dbContext.Students.Include(s => s.Group).ThenInclude(g => g.Speciality).FirstAsync(f => f.Id == id);public async Task<Company> FindCompanyByName(string name) => await _dbContext.Companies.FindAsync(name) ?? throw new NullReferenceException($"Company with name {name} doesn't exists");}
Выше показаны методы, с помощью которых происходит чтение данных. С помощью метода «GetNameCompanies» выводит список всех компаний.
Метод «FindGroupOrDefault» ищет группу по названию. Метод «GetGroups» дает список групп. Метод «FindStudentsByQuery» ищет группу по строке запроса, которая сверяется с названием группы. Метод «FindStudentById» ищет студента по уникальному идентификатору. Метод «FindCompanyByName» ищет компанию по ее названию. Все вышеуказанные методы используют код из листинга 4.
Логика чтения данных из excel состоит из 8 классов. Один класс отвечает за чтение данных по практикам, второй за чтение данных по компаниям и третий отвечает за чтение данных по определенной группе. Также есть базовый класс для классов, отвечающие за чтение данных из excel-файла. Классы, отвечающие за чтение данных из excel-файла, наследуются и используют базовый функционал базового класса, дополняя и адаптируя его, под свои задачи. Остальные 4 класса парсеры-валидаторы, которые из ячейки excel извлекают нужную информацию проверяя ее. Такая архитектура позволяет добавлять для чтения новые таблицы и новые модели данных. 
В константах содержатся regex-выражения, которые позволяют быстро, эффективно, просто и за маленькое число строк кода находить, проверять и извлекать нужную информацию. Regex-выражения позволяют добиться той самой гибкости в чтении, о которой говорилось ранее.
Также, чтобы найти и показать ошибки, которые может допустить пользователь используется своя реализация класса «Exception», что позволяет веб-серверу поймать и выдать известные ошибки. Ошибки, которые не были учтены отображаются как неизвестные ошибки.
Статические классы с методами расширениями позволяют упростить написание кода и повторно использовать логику, связанную с regex, не только в логике с чтением данных из excel-файла. Далее будет еще показано применение данных методов расширения из статических классов.  В базовом классе содержатся базовые методы. 

3.2 Процесс разработки фронтенда
     	
 
В данной работе основной упор был сделан на серверную часть сайта, поэтому в фронтенде используется минималистичный стиль. Основная цветовая тема сайта белая, синяя и серая. Данная цветовая палитра используется, так как она нейтральна и гармонична для человеческого глаза, что повысит комфорт в использовании сайта.
Данный сайт содержит адаптивную верстку, которая позволяет пользоваться сайтом с любых устройств независимо от размеров экрана. Адаптивная верстка достигнута с помощью библиотеки «bootstrap», которая в себе содержит готовые стили для верстки.
Для всех страниц используется общий шаблон, показанный на листинге 9.
Листинг 9 — общий шаблон для всех страниц.
@await RenderSectionAsync("Header", required: true)<ul id="message"></ul> <ul id="search-result">
 	</ul>
 	<div class="l-sidebar">
     	@await RenderSectionAsync("LSideBar", required: false)
 	</div>
 	<main role="main" class="pb-3 container" style="display: flex;  	height: auto;">
     	@RenderBody()
 	</main>
 	<script src="~/lib/jquery/dist/jquery.min.js"></script>
 	<script src="~/js/site.js" asp-append-version="true"></script>
 	@await RenderSectionAsync("Scripts", required: false)
 «Header» - это секция, которая должна быть обязательно реализована, а «LSideBar» — необязательная секция для левого сайдбара.
В данном шаблоне список "message" и "search-result" использованы для вывода сообщений или результатов поиска.
«Main» - это основной контент страницы.
В конце страницы находятся скрипты jQuery и site.js, которые используются для обеспечения динамического поведения страницы.
На листинге 10 содержится «header» для главной страницы.
Листинг 10 — «header» главной страницы.
<nav class="navbar navbar-expand-xxl navbar-light bg-light">
 	<div class="container-fluid">
 	<button class="navbar-toggler" type="button" data-bs-toggle="collapse"   data-bs-target="#navbarSupportedContent" aria- 	controls="navbarSupportedContent" aria-expanded="false" aria-l 	abel="Toggle navigation">
 	<span class="navbar-toggler-icon"></span></button>	<div  	class="collapse navbar-collapse" id="navbarSupportedContent"><ul class="navbar-nav"><li class="nav-item ms-3 mt-xxl-0 mt-3">
 	<input class="form-control" id="search-query" type="search"  	placeholder="Поиск по фио" aria-label="Search">
 	</li><li class="nav-item ms-3 mt-xxl-0 mt-3">
 	<div class="input-group">
 	<button class="btn btn-primary" id="manyprofilesTreatyId"  	type="button">Многопрофильный</button>
 	<select class="form-select" id="companySelectorId"></select>
 	</div> </li><li class="nav-item ms-3 mt-xxl-0 mt-3">
 	<div class="input-group"><button class="btn btn-primary" id="loadExcelButton"  	type="button">Загрузить</button>
 	<input class="form-control btn-secondary" id="uploadFile" accept=".xls" type="file"/><select class="form-select" id="selectionExcelType"><option selected value="/files/uploadgroup">Группа с  	студентами</option>
 	<option value="/files/uploadrikvizit">Данные по компаниям</option><option value="/files/uploadpractic">Данные по практикам  	групп</option>
 	</select></div></li>
<li class="nav-item ms-3 mt-xxl-0 mt-3">
 	<a asp-action="Index" asp-controller="Admin"asp-route- 	pageType="@AdminPageType.Groups" class="nav-link text-secondary"  	aria-current="page">Просмотр данных</a>
 	</li></ul></div>
</div>
</nav>
Код на листинге 10 код описывает навигационную панель («navbar») для веб-страницы. Navbar содержит весь функционал для пользователя. К коду в листинге 10 подключен скрипт на JavaScript, который обращается к серверу, чтобы найти студента из группы, загрузить excel-файл или сформировать договор.

На листинге 11 содержится «header» для навигации. В данном хедере можно выбрать какие данные просматривать.
Листинг 11 — хедер для навигации.
<nav class="navbar navbar-expand-sm navbar-light bg-light">
  <div class="container-fluid">
	<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
  	<span class="navbar-toggler-icon"></span></button>
	<div class="collapse navbar-collapse" id="navbarSupportedContent"><ul class="navbar-nav">
    	<li class="nav-item ms-1 mt-sm-0 mt-3">
          <input class="form-control" type="search" id="search-group-index" placeholder="Поиск по группе" aria-label="Search">
        </li>
    	<li class="nav-item ms-1 mt-sm-0 mt-3">
      	<a asp-action="Index" asp-controller="Home" class="nav-link text-secondary" aria-current="page">Главная</a> </li>
    	<li class="nav-item ms-1 d-lg-none mt-sm-0 mt-3">
      	<a asp-action="Index" asp-controller="Admin" asp-route-pageType="@AdminPageType.Groups" class="nav-link text-secondary">Группы</a>
        </li>
    	<li class="nav-item ms-1 d-lg-none mt-sm-0 mt-3">
      	<a asp-action="Index" asp-controller="Admin" asp-route-pageType="@AdminPageType.Specialties" class="nav-link text-secondary">Специальности</a>
        </li>
    	<li class="nav-item ms-1 d-lg-none mt-sm-0 mt-3">
      	<a asp-action="Index" asp-controller="Admin" asp-route-pageType="@AdminPageType.Companies" class="nav-link text-secondary">Компании</a>
        </li>
    	<li class="nav-item ms-1 d-lg-none mt-sm-0 mt-3">
      	<a asp-action="Index" asp-controller="Admin" asp-route-pageType="@AdminPageType.StTreaties" class="nav-link text-secondary">Шаблоны договоров</a>
        </li>
      </ul>
	</div>
  </div>
</nav>
Данный код отображает навигационную панель (navbar) с набором ссылок на различные страницы сайта. В навигационной панели присутствует поле для поиска по группам и несколько ссылок на страницы администратора.
Код написан на языке Razor, используемом в ASP.NET Core для создания динамических веб-страниц.
На листинге 12 содержится боковая панель для навигации. В данной боковой панеле можно выбрать какие данные просматривать.
Листинг 12 — боковая панель для навигации.
<nav class="navbar navbar-expand-sm navbar-light bg-light">
     <div class="container-fluid">
	<button class="navbar-toggler" type="button" data-bs-toggle="collapse"data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
  	<span class="navbar-toggler-icon"></span></button>
	<div class="collapse navbar-collapse" id="navbarSupportedContent"> <ul class="navbar-nav">
    	<li class="nav-item ms-1 mt-sm-0 mt-3">
      	<input class="form-control" type="search" id="search-group-index" placeholder="Поиск по группе" aria-label="Search"></li>
    	<li class="nav-item ms-1 mt-sm-0 mt-3">
      	<a asp-action="Index" asp-controller="Home" class="nav-link text-secondary" aria-current="page">Главная</a></li>
    	<li class="nav-item ms-1 d-lg-none mt-sm-0 mt-3">
      	<a asp-action="Index" asp-controller="Admin" asp-route-pageType="@AdminPageType.Groups" class="nav-link text-secondary">Группы</a></li>
    	<li class="nav-item ms-1 d-lg-none mt-sm-0 mt-3">
      	<a asp-action="Index" asp-controller="Admin" asp-route-pageType="@AdminPageType.Specialties" class="nav-link text-secondary">Специальности</a></li>
    	<li class="nav-item ms-1 d-lg-none mt-sm-0 mt-3">
      	<a asp-action="Index" asp-controller="Admin" asp-route-pageType="@AdminPageType.Companies" class="nav-link text-secondary">Компании</a></li> <li class="nav-item ms-1 d-lg-none mt-sm-0 mt-3"> <a>Шаблоны договоров </a>
</li>
</ul>
</div>
</div>
</nav>
По клику на кнопку развернется меню, которое включает в себя ссылки на некоторые страницы, на которых просматриваются данные. 

3.3 Итог разработки


На рисунке 1 показана главная страница. Все главные функции в хедере.

    Рисунок 1 — главная страница
 
На рисунке 2 показан результат поиска студента.

Рисунок 2 — результат поиска
 
На рисунке 3 показан список загруженных студентов.
 
Рисунок 3 — список загруженных студентов
 
На рисунке 4 показан список групп и их данные.


Рисунок 4 — список  групп


На рисунке 5 показан список специальностей.

 
Рисунок 5 — список специальностей
 
На рисунке 6 показан список компаний.
 
Рисунок 6 — список компаний
 
На рисунке 7 показана страница с загрузкой шаблонов договоров.


Рисунок 7 — страница с загрузкой шаблонов

4 Тестирование разработки


4.1 Определение тестирования
 
 
Тестирование — это процесс, в ходе которого проверяется работа программного обеспечения с целью обнаружения ошибок и выявления соответствия его требованиям. Оно играет важную роль в разработке программ, так как помогает гарантировать их качество и повышает их надежность перед выпуском. Для этого используются различные методы и инструменты, которые позволяют проверить функциональность, безопасность, производительность и другие характеристики программного обеспечения. Результаты тестирования помогают идентифицировать проблемы и доработать программу, что улучшает ее работу и повышает удобство использования.
Для тестирования программного обеспечения используют различные методы и подходы, такие как функциональное, интеграционное, производительное, безопасности и совместимости. Это помогает выявлять ошибки и проблемы на ранних этапах разработки, улучшать качество программ и повышать их надежность. Тестирование является важной частью жизненного цикла разработки ПО и может быть проведено на разных этапах, включая этапы разработки и использования программы в реальных условиях.
Функциональное тестирование — это методика тестирования программного обеспечения, при которой проверяется соответствие функциональных возможностей программы ее спецификациям и требованиям. Это позволяет удостовериться в том, что программа соответствует ожиданиям заказчика и выполняет все свои задачи правильно и без ошибок. Функциональное тестирование проводится на уровне отдельных компонентов программы, а также на уровне целой системы в целом. В процессе тестирования создаются специальные тестовые сценарии.

Порядок проведения испытаний:
−	корректное отображение сайта в различных пользовательских режимах;
−  	корректное отображение сайта на мобильном устройстве;
−  	функциональность и соответствие проекта поставленной задаче.
Порядок тестирования сайта:
−  	запуск сайта;
−  	тестирование верстки (изменение масштаба отображения);
−  	тестирование верстки сайта в режиме мобильного устройства;
−  	тестирование отображения сайта на другом браузерном движке;
−  	тестирование загрузки excel-файла, содержащего информацию о студентах в группе;
−  	тестирование загрузки excel-файла, содержащего информацию о компаниях;
−  	тестирование загрузки excel-файла, содержащего информацию о группах;
−  	тестирование поиска студента;
−  	тестирование генерации однопрофильного договора;
−  	тестирование генерации многопрофильного договора;
−  	тестирование поиска группы студентов;
−  	тестирование просмотра информации о студентах;
−  	тестирование просмотра информации и группах со студентами;
−  	тестирование просмотра информации и компаниях;
−  	тестирование просмотра информации о специальностях;
−  	тестирование загрузки однопрофильных договоров;
−  	тестирование загрузки многопрофильных договоров;
4.2 Результаты тестирования веб-приложения


Запуск сайта
На рисунке 8 показан запуск сайта.


 
Рисунок 8 — запуск сайта
 
Вывод тестирования: сайт запускается без ошибок.
Тестирование верстки(изменения масштаба).
На рисунке 9 показан сайт при увеличении масштаба в 6 раз.


Рисунок 9 — изменение масштаба
 
Вывод тестирования: Сайт способен нормально отображается в увеличенном масштабе до 500%.
Тестирование сайта в мобильном режиме.
На рисунке 10 показан сайт в мобильном режиме.


Рисунок 10 — сайт в мобильном режиме

Вывод тестирования: сайт нормально отображается в мобильном режиме.
Тестирование отображения сайта на другом браузерном движке.
На рисунке 11 показан сайт, который открыт в Firefox. Firefox имеет свой браузерный движок для отображения контента.

 
Рисунок 11 — сайт открытый в Firefox
 
Вывод тестирования: сайт правильно отображается в разных браузерных движках.
Тестирование загрузки excel-файла, содержащего информацию о студентах в группе;
На рисунке 12 показан результат загрузки группы с студентами.


Рисунок 12 — результат загрузки excel-файла с информацией о студентах
 
Вывод тестирования: информация о студентах загружается успешно.
Тестирование загрузки excel-файла, содержащего информацию о компаниях.
На рисунке 13 показан результат загрузки информации и компаниях.


Рисунок 13 — результат загрузки excel-файла с информацией о компаниях
 
Вывод тестирования: информация о компаниях загружается успешно.
Тестирование загрузки excel-файла, содержащего информацию о группах.
На рисунке 14 показана загрузка  excel-файла, содержащего информацию о группах.

 
Рисунок 14 — результат загрузки excel-файла с информацией о группах
 
Вывод тестирования: данные успешно загружаются.
Тестирование поиска студента.
На рисунке 15 показан результат поиска студента.

 
Рисунок 15 — результат поиска студента
     	 
Вывод тестирования: сайт выдает результат поиска.
Тестирование генерации однопрофильного договора.
На рисунке 16 показан сгенерированный однопрофильный договор.

 
 Рисунок 16 — сгенерированный однопрофильный договор
     	
Вывод тестирования: однопрофильный договор генерируется без ошибок. В шаблоне однопрофильного договора намерено добавлены отступы, чтобы продемонстрировать устойчивость к изменениям в шаблоне договора.
Тестирование генерации многопрофильного договора.
На рисунке 17 показан многопрофильный договор.


 
Рисунок 17 — сгенерированный многопрофильный договор
 
Вывод тестирования: многопрофильный договор генерируется без ошибок.
Тестирование поиска группы студентов.
На рисунке 18 показан результат поиска группы.

 
Рисунок 18 — результат поиска группы

Вывод тестирования: поиск информации о студентах и отображение информации о студентах работает исправно.
Тестирование просмотра информации о студентах.
На рисунке 19 показано отображение информации о студентах.

 
Рисунок 19 — результат поиска группы
 
Вывод тестирования: информация отображается корректно.
Тестирование просмотра информации и группах со студентами.
На рисунке 20 показана таблица с информацией о группах со студентами.
 
 
Рисунок 20 — таблица с информацией о группах
     	
Вывод тестирования: информация отображается корректно.
Тестирование просмотра информации и компаниях.
На рисунке 21 отображается таблица с информацией о компании.

 
 Рисунок 21 — таблица с информацией о компаниях

Вывод тестирования: информация отображается корректно.
Тестирование просмотра информации о специальностях
На рисунке 22 показана таблица с информацией о специальностях.

 
Рисунок 22 — таблица с информацией о специальностях
 
Вывод тестирования: информация отображается корректно.
Тестирование загрузки однопрофильных договоров.
На рисунке 23 показан однопрофильный договор, который скачивается с сервера, чтобы пользователь мог проверить, как генерируется однопрофильный договор.

  
Рисунок 23 — однопрофильный договор

Вывод тестирования: шаблон однопрофильного договора загружается успешно.
Тестирование загрузки многопрофильных договоров.
На рисунке 24 показан тестовый многопрофильный договор, который скачивается если загрузить образец многопрофильного договора.


Рисунок 24 — многопрофильный договор


Вывод тестирования: шаблон многопрофильного договора загружается успешно.
Заключение
 
 
Итогом курсовой работы стало веб-приложение способное автоматически заполнять многопрофильные и однопрофильные договоры для прохождения практик студентами.
Были решены следующие задачи:
– 	сделана возможность на сайте загрузить excel-файл с необходимыми данными;
– 	сделан просмотр загруженных данных;
– 	сделана функция загрузки шаблонов;
– 	сделаны функции формирования договоров.
Благодаря веб-интерфейсу и удобному навигационному меню, пользователи смогут быстро и легко находить необходимые договоры и заполнять их, используя уже готовые шаблоны и excel-файлы.
Кроме того, такое приложение может быть очень полезно для учреждений, которые работают со множеством договоров и имеют множество клиентов. Это помогает сэкономить время и увеличить эффективность работы всей команды.
Таким образом, веб-приложение для заполнения договоров является важным инструментом для оптимизации бизнес-процессов и повышения производительности работы.



Список использованных информационных ресурсов
 
 
Документация по языку программирования  https://learn.microsoft.com/ru-ru/dotnet/csharp/ (дата обращения: 15.01.23г.);
Прайс. C# 7 и .NET Core. Кросс-платформенная разработка для профессионалов (дата обращения: 13.02.23г.);
Троелсен и Джепикс. Язык программирования C# 7 и платформы .NET и .NET Core (дата обращения: 11.02.23г.);
Документация по ASP.NET CORE  https://learn.microsoft.com/en-us/aspnet/core/introduction-to-aspnet-core view=aspnetcore-7.0 (дата обращения: 14.02.23г.);
Документация по EF Core - https://learn.microsoft.com/en-us/ef/core/ (дата обращения: 15.02.23г.);
Документация по  OpemXml.Packaging https://learn.microsoft.com/ru ru/dotnet/api/documentformat.openxml.packaging?view=openxml-2.8.1 (дата обращения: 16.02.23г.);
Документация по jQuery - https://jquery-docs.ru/ (дата обращения: 21.02.23г.);
Документация по ExcelReader  https://github.com/ExcelDataReader/ExcelDataReader (дата обращения: 17.02.23г.);
Учебник по SQLite – https://metanit.com/sql/sqlite/ (дата обращения: 18.02.23г.);
Документация по JavaScript  https://developer.mozilla.org/ru/docs/Web/JavaScript (дата обращения: 19.02.23г.);
Документация по CSS/HTML  https://developer.mozilla.org/ru/docs/Web/CSS/Reference (дата обращения: 20.02.23г.);
 
